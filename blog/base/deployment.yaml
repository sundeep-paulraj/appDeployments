apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: blog
  name: blog
  namespace: default
spec:
  replicas: 3
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: blog
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: blog
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/actuator/prometheus'
        prometheus.io/port: '8080'        
    spec:
      containers:
      - image: sdkumar/blog:latest
        imagePullPolicy: Always
        name: blog
        ports:
        - containerPort: 8080
          protocol: TCP
#        readinessProbe:
#          httpGet:
#            scheme: HTTP
#            path: /actuator/health/readiness
#            port: 8080
#          initialDelaySeconds: 120
#          timeoutSeconds: 3
#          periodSeconds: 30
#          successThreshold: 1
#          failureThreshold: 5
#        livenessProbe:
#          httpGet:
#            scheme: HTTP
#            port: 8080
#            path: /actuator/health/liveness
#          initialDelaySeconds: 60
#          timeoutSeconds: 3
#          periodSeconds: 30
#          successThreshold: 1
#          failureThreshold: 5
        readinessProbe:
          tcpSocket:
            port: 8080
        livenessProbe:
          tcpSocket:
            port: 8080
        resources:
          limits:
            cpu: 200m
            memory: 512Mi
          requests:
            cpu: 200m
            memory: 512Mi
        volumeMounts:
          - mountPath: /usr/local/var/log
            name: app-log
      volumes:
        - name: app-log
          emptyDir: {}
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
